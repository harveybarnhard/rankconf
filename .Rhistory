profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
microbenchmark(
"[32, 11]"      = mtcars[32, 11],
"$carb[32]"     = mtcars$carb[32],
"[[c(11, 32)]]" = mtcars[[c(11, 32)]],
"[[11]][32]"    = mtcars[[11]][32],
".subset2"      = .subset2(mtcars, 11)[32]
)
library(microbenchmark)
microbenchmark(
"[32, 11]"      = mtcars[32, 11],
"$carb[32]"     = mtcars$carb[32],
"[[c(11, 32)]]" = mtcars[[c(11, 32)]],
"[[11]][32]"    = mtcars[[11]][32],
".subset2"      = .subset2(mtcars, 11)[32]
)
library(bigmemory)
install.packages("bigmemory")
library(bigmemory)
?big.matrix
kmax = function(x, k){
k = min(length(x), k)
if(k > 800){
p = length(x) - k + 1
sort(x, partial=p, decreasing=F)[p]
}else{
x[kit::topn(x, k, decreasing=T)[k]]
}
}
simfun = function(n, g, r, nullprop=0){
sigvar = r/((1-r)*n)
if(nullprop>0 & nullprop < 1){
numnull = floor(nullprop*g)
y = rnorm(g, mean=0, sd=sqrt(sigvar)/sqrt(1-nullprop))
y[sample.int(g, numnull)] = 0
}else if(nullprop==1){
y = rep(0, g)
}else{
y = rnorm(g, mean=0, sd=sqrt(sigvar))
}
df = data.table::data.table(
id = rep(1:g, 1, each=n),
yi  = rnorm(n*g, mean=rep(y, 1, each=n), sd=1)
)
df = df[,
list(yhat=mean(yi),
sig2=var(yi)/n),
by=id
]
df[, id:=NULL]
df$y = y
return(df)
}
df = simfun(50, 500, 0.8, nullprop=0)
library(rankconf)
# Sampfun ======================================================================
diffmat = matrix(selfouter(df$y, '-')/sqrt(selfouter(df$sig2, "+")), nrow(df), nrow(df))
diag(diffmat) = NA
sigmat = sqrt(selfouter(df$sig2, FUN = "+"))
ind = !is.na(diffmat)
sigmatind = sigmat[ind]
sampfun = function(sigmatind, ind, k, sd){
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
return(
kmax(
abs(selfouter(booty, "-")[ind]/sigmatind),
k
)
)
}
profvis::profvis({
sampfun(sigmatind, ind, 5, sqrt(df$sig2))
})
df = simfun(50, 2000, 0.8, nullprop=0)
# Sampfun ======================================================================
diffmat = matrix(selfouter(df$y, '-')/sqrt(selfouter(df$sig2, "+")), nrow(df), nrow(df))
diag(diffmat) = NA
sigmat = sqrt(selfouter(df$sig2, FUN = "+"))
ind = !is.na(diffmat)
sigmatind = sigmat[ind]
sampfun = function(sigmatind, ind, k, sd){
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
return(
kmax(
abs(selfouter(booty, "-")[ind]/sigmatind),
k
)
)
}
profvis::profvis({
sampfun(sigmatind, ind, 5, sqrt(df$sig2))
})
selfouter1 = function(x, FUN="+"){
FUN = match.fun(FUN)
y = rep(x, rep.int(length(x), length(x)))
FUN(x,y)
}
selfouter2 = function(x, FUN="+"){
FUN = match.fun(FUN)
FUN(x, rep(x, rep.int(length(x), length(x))))
}
microbenchmark::microbenchmark(
old = selfouter1(df$y),
new = selfouter2(df$y)
)
microbenchmark::microbenchmark(
outer = outer(df$y, df$y, "+"),
old = selfouter1(df$y),
new = selfouter2(df$y)
)
library(rankconf)
sampfun = function(sigmatind, ind, k, sd){
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
return(
kmax(
abs(selfouter(booty, "-")[ind]/sigmatind),
k
)
)
}
profvis::profvis({
sampfun(sigmatind, ind, 5, sqrt(df$sig2))
})
df$y
df = simfun(50, 5000, 0.8, nullprop=0)
profvis::profvis({
sampfun(sigmatind, ind, 5, sqrt(df$sig2))
})
# Sampfun ======================================================================
diffmat = matrix(selfouter(df$y, '-')/sqrt(selfouter(df$sig2, "+")), nrow(df), nrow(df))
diag(diffmat) = NA
sigmat = sqrt(selfouter(df$sig2, FUN = "+"))
ind = !is.na(diffmat)
sigmatind = sigmat[ind]
sampfun = function(sigmatind, ind, k, sd){
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
return(
kmax(
abs(selfouter(booty, "-")[ind]/sigmatind),
k
)
)
}
profvis::profvis({
sampfun(sigmatind, ind, 5, sqrt(df$sig2))
})
profvis::profvis({
sampfun(sigmatind, ind, 800, sqrt(df$sig2))
})
profvis::profvis({
sampfun(sigmatind, ind, 801, sqrt(df$sig2))
})
profvis::profvis({
sampfun(sigmatind, ind, 800, sqrt(df$sig2))
})
profvis::profvis({
sampfun(sigmatind, ind, 801, sqrt(df$sig2))
})
library(rankconf)
partial_sort_dec(c(1,2,3))
partial_sort_dec(c(1,2,3), 1)
partial_sort_dec(c(1,2,3), 2)
partial_sort_dec(c(1,2,3,4,5,6,7), 2)
partial_sort_dec(c(1,2,3,4,5,6,7), 6)
partial_sort_dec(c(1,2,3,4,5,6,7), 9)
partial_sort_dec(c(1,2,3,4,5,6,7), 5)
# kmax =========================================================================
# k-largest elements
kmax1 = function(x, k){
k = min(length(x), k)
if(k > 800){
p = length(x) - k + 1
sort(x, partial=p, decreasing=F)[p]
}else{
x[kit::topn(x, k, decreasing=T)[k]]
}
}
# k-smallest elements
kmin1 = function(x, k){
k = min(length(x), k)
if(k > 800){
p = length(x) - k + 1
-sort(-x, partial=p, decreasing=F)[p]
}else{
x[kit::topn(x, k, decreasing=F)[k]]
}
}
# k-largest elements
kmax2 = function(x, k){
k = min(length(x), k)
partial_sort_inc(x, k)[1:k]
}
# k-smallest elements
kmin2 = function(x, k){
k = min(length(x), k)
partial_sort_dec(x, k)[1:k]
}
kmax1 = function(x, k){
k = min(length(x), k)
if(k > 800){
p = length(x) - k + 1
sort(x, partial=p, decreasing=F)[p]
}else{
x[kit::topn(x, k, decreasing=T)[k]]
}
}
# k-smallest element
kmin1 = function(x, k){
k = min(length(x), k)
if(k > 800){
p = length(x) - k + 1
-sort(-x, partial=p, decreasing=F)[p]
}else{
x[kit::topn(x, k, decreasing=F)[k]]
}
}
# k-largest element
kmax2 = function(x, k){
k = min(length(x), k)
partial_sort_inc(x, k)[k]
}
# k-smallest element
kmin2 = function(x, k){
k = min(length(x), k)
partial_sort_dec(x, k)[k]
}
kmin1(df$y, 5)
kmin2(df$y, 5)
summary(y)
summary(df$y)
kmax2(df$y, 5)
# k-largest element
kmax2 = function(x, k){
k = min(length(x), k)
partial_sort_dec(x, k)[k]
}
# k-smallest element
kmin2 = function(x, k){
k = min(length(x), k)
partial_sort_inc(x, k)[k]
}
kmin1(df$y, 5)
kmin2(df$y, 5)
kmax2(df$y, 5)
kmax1(df$y, 5)
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k)
)
k=5
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k)
)
df$y
k=5
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k),
times = 1000
)
k=100
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k),
times = 1000
)
k=400
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k),
times = 1000
)
k=1000
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k),
times = 1000
)
k = 500
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k),
times = 1000
)
k = 800
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k),
times = 1000
)
k = 801
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k),
times = 1000
)
library(rankconf)
library(rankconf)
# k-largest element
kmax3 = function(x, k){
k = min(length(x), k)
x[top_i_pq(x, k)[k]]
}
# k-smallest element
kmin3 = function(x, k){
k = min(length(x), k)
-x[top_i_pq(-x, k)[k]]
}
k=1000
microbenchmark::microbenchmark(
oldmax = kmax1(df$y, k),
newmax = kmax2(df$y, k),
newermax = kmax3(df$y, k),
oldmin = kmin1(df$y, k),
newmin = kmin2(df$y, k),
times = 1000
)
profvis::profvis({
sampfun(sigmatind, ind, 800, sqrt(df$sig2))
})
profvis::profvis({
sampfun(sigmatind, ind, 800, sqrt(df$sig2))
})
profvis::profvis({
sampfun(sigmatind, ind, 1000, sqrt(df$sig2))
})
View(sort)
profvis::profvis({
sampfun(sigmatind, ind, 800, sqrt(df$sig2))
})
profvis::profvis({
sampfun(sigmatind, ind, 2000, sqrt(df$sig2))
})
df$y
profvis::profvis({
sampfun(sigmatind, ind, nrow(sigmatind), sqrt(df$sig2))
})
nrow(sigmatind)
nrow(ind)
length(ind)
profvis::profvis({
sampfun(sigmatind, ind, nrow(ind), sqrt(df$sig2))
})
nrow(ind)
profvis::profvis({
sampfun(sigmatind, ind, 5000, sqrt(df$sig2))
})
df = simfun(50, 7500, 0.8, nullprop=0)
profvis::profvis({
sampfun(sigmatind, ind, 7500, sqrt(df$sig2))
})
# Sampfun ======================================================================
diffmat = matrix(selfouter(df$y, '-')/sqrt(selfouter(df$sig2, "+")), nrow(df), nrow(df))
diag(diffmat) = NA
sigmat = sqrt(selfouter(df$sig2, FUN = "+"))
ind = !is.na(diffmat)
sigmatind = sigmat[ind]
sampfun = function(sigmatind, ind, k, sd){
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
return(
kmax(
abs(selfouter(booty, "-")[ind]/sigmatind),
k
)
)
}
profvis::profvis({
sampfun(sigmatind, ind, 7500, sqrt(df$sig2))
})
?abs
View(abs)
View(.Primitive("abs"))
sd = sqrt(df$sig2)
n  = nrow(df)
sd = sqrt(df$sig2)
n  = nrow(df)
profvis::profvis({
sampfun(sigmatind, ind, 800, sd)
})
profvis::profvis({
sampfun(sigmatind, ind, nrow(df), sd)
})
profvis::profvis({
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
})
sd = sqrt(df$sig2)
n  = nrow(df)
profvis::profvis({
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
})
microbenchmark::microbenchmark(
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
)
View(Rfast::Rnorm)
View(RcppZiggurat::zrnorm)
profvis::profvis({
abs(selfouter(df$y, "-")[ind]/sigmatind)
})
profvis::profvis({
abs(selfouter(df$y, "-")[ind]/sigmatind)
})
View(force)
profvis::profvis({
sampfun(sigmatind, ind, nrow(df), sd)
})
microbenchmark::microbenchmark(
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
)
profvis::profvis({
sampfun(sigmatind, ind, nrow(df), sd)
})
library(rankconf)
profvis::profvis({
sampfun(sigmatind, ind, nrow(df), sd)
})
simfun = function(n, g, r, nullprop=0){
sigvar = r/((1-r)*n)
if(nullprop>0 & nullprop < 1){
numnull = floor(nullprop*g)
y = rnorm(g, mean=0, sd=sqrt(sigvar)/sqrt(1-nullprop))
y[sample.int(g, numnull)] = 0
}else if(nullprop==1){
y = rep(0, g)
}else{
y = rnorm(g, mean=0, sd=sqrt(sigvar))
}
df = data.table::data.table(
id = rep(1:g, 1, each=n),
yi  = rnorm(n*g, mean=rep(y, 1, each=n), sd=1)
)
df = df[,
list(yhat=mean(yi),
sig2=var(yi)/n),
by=id
]
df[, id:=NULL]
df$y = y
return(df)
}
df = simfun(50, 750, 0.8, nullprop=0)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
?on.exit
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
sig2 = rep(1, 10000)
sig2 = rep(1, 6000)
reject = matrix(F, nrow=length(sig2), ncol=length(sig2))
object.size(reject)
reject = matrix(0, nrow=length(sig2), ncol=length(sig2))
object.size(reject)
?matrix
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
profvis::profvis({
sampfun(sigmatind, ind, nrow(df), sd)
})
sampfun2 = function(sigmatind, ind, k, sd){
booty = Rfast::Rnorm(length(sd), m=0, s=1)*sd
return(
kmax(
abs(selfouter(booty, "-")[ind]/sigmatind[ind]),
k
)
)
}
profvis::profvis({
sampfun2(sigmat, ind, nrow(df), sd)
})
profvis::profvis({
sampfun(sigmat[ind], ind, nrow(df), sd)
})
gc()
profvis::profvis({
sampfun(sigmat[ind], ind, nrow(df), sd)
})
profvis::profvis({
sampfun2(sigmat, ind, nrow(df), sd)
})
