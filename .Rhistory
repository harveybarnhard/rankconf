library(rankconf)
usethis::use_rcpp()
usethis::use_rcpp_armadillo()
library(rankconf)
library(rankconf)
timesTwo(2)
library(rankconf)
timesTwo(2)
library(rankconf)
timesTwo(1)
library(rankconf)
library(rankconf)
rankconf::timesTwo(1)
library(rankconf)
getLoadedDLLs()
library(rankconf)
library(rankconf)
library(rankconf)
library(rankconf)
library(rankconf)
Rcpp::compileAttributes()
library(rankconf)
?order
data.table::order(c(1,2,3))
?chorder
order(c(2,1,3))
kmin = function(x, k){
k = min(length(x), k)
if(k>1000){
partial = length(x) - k + 1
return(
x[x >= sort(x, partial=partial)[partial]]
)
}else{
return(
x[kit::topn(x, k, decreasing=F)[k]]
)
}
}
x = runif(1000)
x = runif(100000)
?sort
kmin(x, 1)
kmin(x, 10)
kmin(x, 1000)
kmin(x, 1001)
kmin = function(x, k){
k = min(length(x), k)
if(k>1000){
partial = length(x) - k + 1
return(
x[x >= sort(x, partial=partial, decreasing=F)[k]]
)
}else{
return(
x[kit::topn(x, k, decreasing=F)[k]]
)
}
}
kmin(x, 1001)
kmin(x, 1000)
kmin(x, 1001)
?order
kmin = function(x, k){
k = min(length(x), k)
if(k>1000){
partial = length(x) - k + 1
return(
x[order(x, partial=partial, decreasing=F)[k]]
)
}else{
return(
x[kit::topn(x, k, decreasing=F)[k]]
)
}
}
kmin(x, 1001)
order(x, partial=2)
order(x, partial=2, decreasing=F
)
kmin = function(x, k){
k = min(length(x), k)
if(k>1000){
p = length(x) - k + 1
return(
x[sort(x, partial=p, decreasing=F)[p]]
)
}else{
return(
x[kit::topn(x, k, decreasing=F)[k]]
)
}
}
kmin = function(x, k){
k = min(length(x), k)
if(k>1000){
p = length(x) - k + 1
return(
sort(x, partial=p, decreasing=F)[p]
)
}else{
return(
x[kit::topn(x, k, decreasing=F)[k]]
)
}
}
kmin(x, 1001)
kmin(x, 1000)
kmin = function(x, k){
k = min(length(x), k)
if(k>1000){
p = length(x) - k + 1
return(
sort(x, partial=p, decreasing=T)[p]
)
}else{
return(
x[kit::topn(x, k, decreasing=F)[k]]
)
}
}
kmin(x, 1000)
kmin(x, 1001)
sort(x, partial=2, decreasing=T)
sort(-x, partial=2, decreasing=F)
kmin = function(x, k){
k = min(length(x), k)
if(k>1000){
p = length(x) - k + 1
return(
-sort(-x, partial=p, decreasing=T)[p]
)
}else{
return(
x[kit::topn(x, k, decreasing=F)[k]]
)
}
}
kmin(x, 1001)
kmin = function(x, k){
k = min(length(x), k)
if(k>1000){
p = length(x) - k + 1
return(
-sort(-x, partial=p, decreasing=F)[p]
)
}else{
return(
x[kit::topn(x, k, decreasing=F)[k]]
)
}
}
kmin(x, 1001)
kmin(x, 1000)
microbenchmark(kmin(x,1001), kmin(x,1000))
microbenchmark::microbenchmark(kmin(x,1001), kmin(x,1000))
microbenchmark::microbenchmark(kmin(x,1001), kmin(x,1000))
microbenchmark::microbenchmark(kmin(x,1001), kmin(x,1000))
microbenchmark::microbenchmark(kmin(x,1001), kmin(x,1000))
simfun = function(n, g, r, nullprop=0){
sigvar = r/((1-r)*n)
if(nullprop>0 & nullprop < 1){
numnull = floor(nullprop*g)
y = rnorm(g, mean=0, sd=sqrt(sigvar)/sqrt(1-nullprop))
y[sample.int(g, numnull)] = 0
}else if(nullprop==1){
y = rep(0, g)
}else{
y = rnorm(g, mean=0, sd=sqrt(sigvar))
}
df = data.table::data.table(
id = rep(1:g, 1, each=n),
yi  = rnorm(n*g, mean=rep(y, 1, each=n), sd=1)
)
df = df[,
list(yhat=mean(yi),
sig2=var(yi)/n),
by=id
]
df[, id:=NULL]
df$y = y
return(df)
}
df = simfun(50, 500, 0.8, nullprop=0)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500, thr=parallel::detectCores()-1)
})
simfun = function(n, g, r, nullprop=0){
sigvar = r/((1-r)*n)
if(nullprop>0 & nullprop < 1){
numnull = floor(nullprop*g)
y = rnorm(g, mean=0, sd=sqrt(sigvar)/sqrt(1-nullprop))
y[sample.int(g, numnull)] = 0
}else if(nullprop==1){
y = rep(0, g)
}else{
y = rnorm(g, mean=0, sd=sqrt(sigvar))
}
df = data.table::data.table(
id = rep(1:g, 1, each=n),
yi  = rnorm(n*g, mean=rep(y, 1, each=n), sd=1)
)
df = df[,
list(yhat=mean(yi),
sig2=var(yi)/n),
by=id
]
df[, id:=NULL]
df$y = y
return(df)
}
df = simfun(50, 500, 0.8, nullprop=0)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500, thr=parallel::detectCores()-1)
})
parallel::detectCores()
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500, thr=parallel::detectCores()-1)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500, thr=parallel::detectCores()-1)
})
library(rankconf)
source('Z:/rankconf/USA_tracts.R')
