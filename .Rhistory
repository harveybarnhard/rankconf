newkmax(x, 3)
library(rankconf)
x = runif(10, 0, 100)
x
newkmax(x, 2)
library(rankconf)
x
newkmax(x, 1)
newkmax(x, 2)
newkmax(x, 10)
library(rankconf)
newkmax(x, 1)
newkmax(x, 2)
library(rankconf)
newkmax(x, 1)
newkmax(x, 2)
newkmax(x, 3)
k=1000
microbenchmark::microbenchmark(
oldmax    = kmax1(df$y, k),
newermax  = kmax3(df$y, k),
newestmax = newkmax(df$y, k),
times = 1000
)
df$y
length(df$y)
k=300
microbenchmark::microbenchmark(
oldmax    = kmax1(df$y, k),
newermax  = kmax3(df$y, k),
newestmax = newkmax(df$y, k),
times = 1000
)
microbenchmark::microbenchmark(
oldmax    = kmax1(df$y, k),
newestmax = newkmax(df$y, k),
times = 1000
)
# k-smallest element
kmax2 = function(x, k){
x = runif(10000)
k = min(length(x), k)
newkmax(x, k)
}
k=300
microbenchmark::microbenchmark(
oldmax    = kmax1(df$y, k),
newestmax = newkmax(df$y, k),
times = 1000
)
# kmax =========================================================================
# k-largest element
kmax1 = function(x, k){
x = runif(10000)
k = min(length(x), k)
if(k > 800){
p = length(x) - k + 1
sort(x, partial=p, decreasing=F)[p]
}else{
x[kit::topn(x, k, decreasing=T)[k]]
}
}
# k-smallest element
kmax2 = function(x, k){
x = runif(10000)
k = min(length(x), k)
newkmax(x, k)
}
k=300
microbenchmark::microbenchmark(
oldmax    = kmax1(df$y, k),
newestmax = kmax2(df$y, k),
times = 1000
)
x = c(1,2,3,4)
X = matrix(x,2, 2)
x
X
x/X
2/Inf
kmax2(c(1,2,3,4,5), 2)
library(rankconf)
kmax2(c(1,2,3,4), 2)
rm(kmax2)
rm(kmax)
library(rankconf)
kmax(c(1,2,3,4), 2)
kmax(c(1,2,3,4), 0)
kmax(c(1,2,3,4), 1)
kmax(c(1,2,3,4), 3)
kmax(c(1,2,3,4), 4)
microbenchmark(kmax(runif(1000), 2), kmax2(runif(1000), 2))
microbenchmark::microbenchmark(kmax(runif(1000), 2), kmax2(runif(1000), 2))
microbenchmark::microbenchmark(kmax(runif(1000), 2), kmax2(runif(1000), 2))
microbenchmark::microbenchmark(kmax(runif(10000), 2), kmax2(runif(10000), 2))
microbenchmark::microbenchmark(kmax(runif(10000), 2), kmax2(runif(10000), 2))
microbenchmark::microbenchmark(kmax(runif(10000), 2), kmax2(runif(10000), 2))
microbenchmark::microbenchmark(kmax(runif(10000), 100), kmax2(runif(10000), 100))
microbenchmark::microbenchmark(kmax(runif(10000), 100), kmax2(runif(10000), 100))
microbenchmark::microbenchmark(kmax(runif(10000), 100), kmax2(runif(10000), 100))
microbenchmark::microbenchmark(kmax(runif(10000), 100), kmax2(runif(10000), 100))
microbenchmark::microbenchmark(kmax(runif(10000), 1000), kmax2(runif(10000), 1000))
kmax2(c(3,2,1), 1)
kmax2(c(3,2,1), 2)
kmax2(c(3,2,1), 3)
kmax2(c(3,2,10), 3)
kmax2(c(3,2,10), 2)
kmax2(c(3,2,10), 1)
kmax2(c(3,2,10), 4)
kmax2(c(3,2,10), 3)
kmax2(c(3,2,10), 2)
kmax2(c(3,2,10), 1)
kmax2(c(3,2,10), 2)
kmax2(c(3,2,10), )
kmax2(c(3,2,10), 3)
kmax2(c(3,2,10), 1)
kmax2(c(3,2,10), 2)
kmax2(c(3,2,10), 3)
object.size(runif(73000))
object.size(runif(7500))
object.size(runif(7500^2))
IntegerVector top_i_pq(NumericVector v, int n){
typedef pair<double, int> Elt;
priority_queue< Elt, vector<Elt>, greater<Elt> > pq;
vector<int> result;
for (int i = 0; i != v.size(); ++i) {
if (pq.size() < n)
pq.push(Elt(v[i], i));
else {
Elt elt = Elt(v[i], i);
if (pq.top() < elt) {
pq.pop();
pq.push(elt);
}
}
}
result.reserve(pq.size());
while (!pq.empty()) {
result.push_back(pq.top().second + 1);
pq.pop();
}
return wrap(result);
}
library(rankconf)
top_i_pq(c(3, 7, 3, 5), 2)
top_i_pq(c(3, 7, 3, 5), 3)
top_i_pq(c(3, 7, 3, 5, 2), 1)
top_i_pq(c(3, 7, 3, 5, 2), 2)
top_i_pq(c(3, 7, 3, 5, 2), 3)
top_i_pq(c(3, 7, 3, 5, 2), 4)
top_i_pq(c(3, 7, 3, 5, 2), 5)
library(rankconf)
library(rankconf)
library(rankconf)
top_n(c(1,2,3,4,5,8,2,10))
top_n(runif(10000))
top_n(runif(10000))
# ==============================================================================
microbenchmark::microbenchmark(
top_n(runif(10000), 5),
kmax(runif(10000), 5)
)
# ==============================================================================
microbenchmark::microbenchmark(
top_n(runif(10000), 5),
kmax(runif(10000), 5)
)
# ==============================================================================
microbenchmark::microbenchmark(
top_n(runif(10000), 1000),
kmax(runif(10000), 1000)
)
# ==============================================================================
microbenchmark::microbenchmark(
top_n(runif(1000), 100),
kmax(runif(1000), 100)
)
# ==============================================================================
microbenchmark::microbenchmark(
top_n(runif(1000), 100),
kmax(runif(1000), 100)
)
simfun = function(n, g, r, nullprop=0){
sigvar = r/((1-r)*n)
if(nullprop>0 & nullprop < 1){
numnull = floor(nullprop*g)
y = rnorm(g, mean=0, sd=sqrt(sigvar)/sqrt(1-nullprop))
y[sample.int(g, numnull)] = 0
}else if(nullprop==1){
y = rep(0, g)
}else{
y = rnorm(g, mean=0, sd=sqrt(sigvar))
}
df = data.table::data.table(
id = rep(1:g, 1, each=n),
yi  = rnorm(n*g, mean=rep(y, 1, each=n), sd=1)
)
df = df[,
list(yhat=mean(yi),
sig2=var(yi)/n),
by=id
]
df[, id:=NULL]
df$y = y
return(df)
}
df = simfun(50, 400, 0.8, nullprop=0)
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
n
y
diffmat = matrix(selfouter(y, '-')/sqrt(selfouter(sig2, "+")), n, n)
diffmat = matrix(selfouter(df$y, '-')/sqrt(selfouter(df$sig2, "+")), n, n)
diffmat
length(diffmat)
diag(diffmat) = NA
diffmat = abs(diffmat)
diag(diffmat) = NA
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
library(rankconf)
library(rankconf)
})
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=500)
})
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=100)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=100)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=100)
})
length(df$yhat)
400*400
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=100)
})
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=100, alpha=0.1)
})
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=100, alpha=0.5)
})
test = list()
test[["1-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
min(1, 2)
min(1, 2, 3)
min(1, 2, 3, -1, )
library(rankconf)
test[["1-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
library(rankconf)
test[["1-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
test[["10-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=10, thr=parallel::detectCores()-1)
test[["500-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=500, thr=parallel::detectCores()-1)
test[["FDR"]] = rankconf(df$yhat, df$sig2, type="FDR", alpha=0.05)
test[["Mogstad"]] = csranks::csranks(-df$yhat, sqrt(df$sig2))
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$U, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["FDR"]]$L, color="red")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["FDR"]]$U, color="red")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
library(ggplot2)
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$U, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["FDR"]]$L, color="red")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["FDR"]]$U, color="red")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["10-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["10-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
library(rankconf)
test = list()
test[["Mogstad"]] = csranks::csranks(-df$yhat, sqrt(df$sig2))
test[["1-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
test[["10-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=10, thr=parallel::detectCores()-1)
test[["500-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=500, thr=parallel::detectCores()-1)
test[["FDR"]] = rankconf(df$yhat, df$sig2, type="FDR", alpha=0.05)
library(ggplot2)
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
# geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
#  geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
profvis::profvis({
csranks::csranks(-df$yhat, sqrt(df$sig2))
})
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
})
library(rankconf)
profvis::profvis({
rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
})
profmem(
rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
)
test = profmem(
rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
)
View(test)
library(rankconf)
library(rankconf)
Sys.time()
start_time = Sys.time()
message(start_time)
start_time = Sys.time()
message(start_time)
start_time = Sys.time()
message(start_time)
start_time = Sys.time()
message(start_time)
message("Start time: ", start_time, ". End time: ", Sys.time())
test[["500-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=500, thr=parallel::detectCores()-1)
ggplot(df, aes(x=rank(yhat), y=rank(y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
library(ggplot2)
ggplot(df, aes(x=rank(df$yhat), y=rank(df$y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
library(ggplot2)
ggplot(df, aes(x=rank(df$yhat), y=rank(df$y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
test = list()
test[["Mogstad"]] = csranks::csranks(-df$yhat, sqrt(df$sig2))
test[["1-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
test[["10-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=10, thr=parallel::detectCores()-1)
test[["500-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=500, thr=parallel::detectCores()-1)
test[["FDR"]] = rankconf(df$yhat, df$sig2, type="FDR", alpha=0.05)
library(ggplot2)
ggplot(df, aes(x=rank(df$yhat), y=rank(df$y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["500-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(df$yhat), y=rank(df$y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
test[["1-FWER"]] = rankconf(df$yhat, df$sig2, type="BKFWER", k=1, thr=parallel::detectCores()-1)
ggplot(df, aes(x=rank(df$yhat), y=rank(df$y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
test[["Mogstad"]] = csranks::csranks(-df$yhat, sqrt(df$sig2))
ggplot(df, aes(x=rank(df$yhat), y=rank(df$y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["1-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(df$yhat), y=rank(df$y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="black")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["10-FWER"]]$L, color="blue")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["10-FWER"]]$U, color="blue")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
ggplot(df, aes(x=rank(df$yhat), y=rank(df$y))) +
geom_point() +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$L, color="1-FWER")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["Mogstad"]]$U, color="1-FWER")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["10-FWER"]]$L, color="10-FWER")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["10-FWER"]]$U, color="10-FWER")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["FDR"]]$L, color="FDR")) +
geom_point(mapping=aes(x=rank(df$yhat), y=test[["FDR"]]$U, color="FDR")) +
theme_classic() +
xlab("Estimated Rank") + ylab("True Rank")
7400^2
# Paths and libraries ==========================================================
library(data.table)
library(ggplot2)
library(smoov)
library(extrafont)
# execute once to add fonts:
# link www.fontsquirrel.com/fonts/latin-modern-roman
font_import(pattern = "lmroman*", prompt=F)
# Load data ====================================================================
df = fread(file.path(.github, "rankconf-paper", "data", "results",
"USA_county_3208.csv"))
df$fips = smoov::create_fips(df$state, df$county)
df = data.table::fread("https://opportunityinsights.org/wp-content/uploads/2018/10/county_outcomes_simple.csv")
df[state==2]
df[state==2, c("kfr_pooled_pooled_p25")]
df[state==2, c("county","kfr_pooled_pooled_p25")]
df[state==2, c("county","cz_name","kfr_pooled_pooled_p25")]
df[state==2, c("county","cz","kfr_pooled_pooled_p25")]
df[state==2, c("county","czname","kfr_pooled_pooled_p25")]
df[state==2, c("county","czname","kfr_pooled_pooled_p25", "kfr_pooled_pooled_25_se")]
df[state==2, c("county","czname","kfr_pooled_pooled_p25", "kfr_pooled_pooled_p25_se")]
